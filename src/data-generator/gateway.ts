/* DO NOT EDIT! This file is auto-generated by yarn data-generator:generate-types - see `codegen.yml` */
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Date: any;
  Map: any;
};

export type Address = {
  __typename?: 'Address';
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  district?: Maybe<Scalars['String']>;
  districtName?: Maybe<Scalars['String']>;
  from?: Maybe<Scalars['Date']>;
  line?: Maybe<Array<Maybe<Scalars['String']>>>;
  lineName?: Maybe<Array<Maybe<Scalars['String']>>>;
  postalCode?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stateName?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['String']>;
  to?: Maybe<Scalars['Date']>;
  type?: Maybe<AddressType>;
  use?: Maybe<Scalars['String']>;
};

export type AddressInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  district?: InputMaybe<Scalars['String']>;
  from?: InputMaybe<Scalars['Date']>;
  line?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  postalCode?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
  text?: InputMaybe<Scalars['String']>;
  to?: InputMaybe<Scalars['Date']>;
  type?: InputMaybe<AddressType>;
  use?: InputMaybe<Scalars['String']>;
};

export enum AddressType {
  AdminStructure = 'ADMIN_STRUCTURE',
  CrvsOffice = 'CRVS_OFFICE',
  DeceasedUsualResidence = 'DECEASED_USUAL_RESIDENCE',
  HealthFacility = 'HEALTH_FACILITY',
  IdpCamp = 'IDP_CAMP',
  MilitaryBaseOrCantonment = 'MILITARY_BASE_OR_CANTONMENT',
  Other = 'OTHER',
  PrimaryAddress = 'PRIMARY_ADDRESS',
  PrivateHome = 'PRIVATE_HOME',
  SecondaryAddress = 'SECONDARY_ADDRESS',
  UnhcrCamp = 'UNHCR_CAMP'
}

export type ApplicationConfiguration = {
  __typename?: 'ApplicationConfiguration';
  ADDRESSES?: Maybe<Scalars['Int']>;
  APPLICATION_NAME?: Maybe<Scalars['String']>;
  BIRTH?: Maybe<Birth>;
  COUNTRY_LOGO?: Maybe<CountryLogo>;
  CURRENCY?: Maybe<Currency>;
  DEATH?: Maybe<Death>;
  EXTERNAL_VALIDATION_WORKQUEUE?: Maybe<Scalars['Boolean']>;
  FIELD_AGENT_AUDIT_LOCATIONS?: Maybe<Scalars['String']>;
  HIDE_EVENT_REGISTER_INFORMATION?: Maybe<Scalars['Boolean']>;
  NID_NUMBER_PATTERN?: Maybe<Scalars['String']>;
  PHONE_NUMBER_PATTERN?: Maybe<Scalars['String']>;
};

export type ApplicationConfigurationInput = {
  ADDRESSES?: InputMaybe<Scalars['Int']>;
  APPLICATION_NAME?: InputMaybe<Scalars['String']>;
  BIRTH?: InputMaybe<BirthInput>;
  COUNTRY_LOGO?: InputMaybe<CountryLogoInput>;
  CURRENCY?: InputMaybe<CurrencyInput>;
  DEATH?: InputMaybe<DeathInput>;
  EXTERNAL_VALIDATION_WORKQUEUE?: InputMaybe<Scalars['Boolean']>;
  FIELD_AGENT_AUDIT_LOCATIONS?: InputMaybe<Scalars['String']>;
  HIDE_EVENT_REGISTER_INFORMATION?: InputMaybe<Scalars['Boolean']>;
  NID_NUMBER_PATTERN?: InputMaybe<Scalars['String']>;
  PHONE_NUMBER_PATTERN?: InputMaybe<Scalars['String']>;
};

export type AssignmentData = {
  __typename?: 'AssignmentData';
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  officeName?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type Attachment = {
  __typename?: 'Attachment';
  _fhirID?: Maybe<Scalars['ID']>;
  contentType?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['Date']>;
  data?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  originalFileName?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  subject?: Maybe<AttachmentSubject>;
  systemFileName?: Maybe<Scalars['String']>;
  type?: Maybe<AttachmentType>;
};

export type AttachmentInput = {
  _fhirID?: InputMaybe<Scalars['ID']>;
  contentType?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['Date']>;
  data: Scalars['String'];
  description?: InputMaybe<Scalars['String']>;
  originalFileName?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<Scalars['String']>;
  subject?: InputMaybe<AttachmentSubject>;
  systemFileName?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<AttachmentType>;
};

export enum AttachmentSubject {
  Child = 'CHILD',
  ChildAge = 'CHILD_AGE',
  DeceasedDeathCauseProof = 'DECEASED_DEATH_CAUSE_PROOF',
  DeceasedDeathProof = 'DECEASED_DEATH_PROOF',
  DeceasedIdProof = 'DECEASED_ID_PROOF',
  Father = 'FATHER',
  InformantIdProof = 'INFORMANT_ID_PROOF',
  LegalGuardianProof = 'LEGAL_GUARDIAN_PROOF',
  Mother = 'MOTHER',
  Other = 'OTHER',
  Parent = 'PARENT'
}

export enum AttachmentType {
  AttestedLetterOfDeath = 'ATTESTED_LETTER_OF_DEATH',
  BirthCertificate = 'BIRTH_CERTIFICATE',
  BurialReceipt = 'BURIAL_RECEIPT',
  CoronersReport = 'CORONERS_REPORT',
  HospitalCertificateOfDeath = 'HOSPITAL_CERTIFICATE_OF_DEATH',
  MedicallyCertifiedCauseOfDeath = 'MEDICALLY_CERTIFIED_CAUSE_OF_DEATH',
  NationalId = 'NATIONAL_ID',
  NotificationOfBirth = 'NOTIFICATION_OF_BIRTH',
  Other = 'OTHER',
  Passport = 'PASSPORT',
  PoliceCertificateOfDeath = 'POLICE_CERTIFICATE_OF_DEATH',
  ProofOfAssignedResponsibility = 'PROOF_OF_ASSIGNED_RESPONSIBILITY',
  ProofOfLegalGuardianship = 'PROOF_OF_LEGAL_GUARDIANSHIP',
  VerbalAutopsyReport = 'VERBAL_AUTOPSY_REPORT'
}

export enum AttendantType {
  Layperson = 'LAYPERSON',
  Midwife = 'MIDWIFE',
  None = 'NONE',
  Nurse = 'NURSE',
  NurseMidwife = 'NURSE_MIDWIFE',
  Other = 'OTHER',
  OtherParamedicalPersonnel = 'OTHER_PARAMEDICAL_PERSONNEL',
  Physician = 'PHYSICIAN'
}

export type Avatar = {
  __typename?: 'Avatar';
  data: Scalars['String'];
  type: Scalars['String'];
};

export type AvatarInput = {
  data: Scalars['String'];
  type: Scalars['String'];
};

export type Birth = {
  __typename?: 'Birth';
  FEE?: Maybe<BirthFee>;
  LATE_REGISTRATION_TARGET?: Maybe<Scalars['Int']>;
  REGISTRATION_TARGET?: Maybe<Scalars['Int']>;
};

export type BirthEventSearchSet = EventSearchSet & {
  __typename?: 'BirthEventSearchSet';
  childName?: Maybe<Array<Maybe<HumanName>>>;
  dateOfBirth?: Maybe<Scalars['Date']>;
  id: Scalars['ID'];
  registration?: Maybe<RegistrationSearchSet>;
  type?: Maybe<Scalars['String']>;
};

export type BirthFee = {
  __typename?: 'BirthFee';
  DELAYED?: Maybe<Scalars['Float']>;
  LATE?: Maybe<Scalars['Float']>;
  ON_TIME?: Maybe<Scalars['Float']>;
};

export type BirthFeeInput = {
  DELAYED?: InputMaybe<Scalars['Float']>;
  LATE?: InputMaybe<Scalars['Float']>;
  ON_TIME?: InputMaybe<Scalars['Float']>;
};

export type BirthInput = {
  FEE?: InputMaybe<BirthFeeInput>;
  LATE_REGISTRATION_TARGET?: InputMaybe<Scalars['Int']>;
  REGISTRATION_TARGET?: InputMaybe<Scalars['Int']>;
};

export type BirthRegResultSet = {
  __typename?: 'BirthRegResultSet';
  results?: Maybe<Array<Maybe<BirthRegistration>>>;
  totalItems?: Maybe<Scalars['Int']>;
};

export enum BirthRegType {
  BothParents = 'BOTH_PARENTS',
  FatherOnly = 'FATHER_ONLY',
  InformantOnly = 'INFORMANT_ONLY',
  MotherOnly = 'MOTHER_ONLY',
  Self = 'SELF'
}

export type BirthRegistration = EventRegistration & {
  __typename?: 'BirthRegistration';
  _fhirIDMap?: Maybe<Scalars['Map']>;
  attendantAtBirth?: Maybe<AttendantType>;
  birthRegistrationType?: Maybe<BirthRegType>;
  birthType?: Maybe<BirthType>;
  child?: Maybe<Person>;
  childrenBornAliveToMother?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['Date']>;
  eventLocation?: Maybe<Location>;
  father?: Maybe<Person>;
  foetalDeathsToMother?: Maybe<Scalars['Int']>;
  history?: Maybe<Array<Maybe<History>>>;
  id: Scalars['ID'];
  informant?: Maybe<RelatedPerson>;
  lastPreviousLiveBirth?: Maybe<Scalars['Date']>;
  mother?: Maybe<Person>;
  otherAttendantAtBirth?: Maybe<Scalars['String']>;
  questionnaire?: Maybe<Array<Maybe<QuestionnaireQuestion>>>;
  registration?: Maybe<Registration>;
  updatedAt?: Maybe<Scalars['Date']>;
  weightAtBirth?: Maybe<Scalars['Float']>;
};

export type BirthRegistrationInput = {
  _fhirIDMap?: InputMaybe<Scalars['Map']>;
  attendantAtBirth?: InputMaybe<AttendantType>;
  birthRegistrationType?: InputMaybe<BirthRegType>;
  birthType?: InputMaybe<BirthType>;
  child?: InputMaybe<PersonInput>;
  childrenBornAliveToMother?: InputMaybe<Scalars['Int']>;
  createdAt?: InputMaybe<Scalars['Date']>;
  eventLocation?: InputMaybe<LocationInput>;
  father?: InputMaybe<PersonInput>;
  foetalDeathsToMother?: InputMaybe<Scalars['Int']>;
  informant?: InputMaybe<RelatedPersonInput>;
  lastPreviousLiveBirth?: InputMaybe<Scalars['Date']>;
  mother?: InputMaybe<PersonInput>;
  otherAttendantAtBirth?: InputMaybe<Scalars['String']>;
  questionnaire?: InputMaybe<Array<InputMaybe<QuestionnaireQuestionInput>>>;
  registration?: InputMaybe<RegistrationInput>;
  updatedAt?: InputMaybe<Scalars['Date']>;
  weightAtBirth?: InputMaybe<Scalars['Float']>;
};

export enum BirthType {
  HigherMultipleDelivery = 'HIGHER_MULTIPLE_DELIVERY',
  Quadruplet = 'QUADRUPLET',
  Single = 'SINGLE',
  Triplet = 'TRIPLET',
  Twin = 'TWIN'
}

export enum CauseOfDeathMethodType {
  LayReported = 'LAY_REPORTED',
  MedicallyCertified = 'MEDICALLY_CERTIFIED',
  Physician = 'PHYSICIAN',
  VerbalAutopsy = 'VERBAL_AUTOPSY'
}

export type Certificate = {
  __typename?: 'Certificate';
  collector?: Maybe<RelatedPerson>;
  data?: Maybe<Scalars['String']>;
  hasShowedVerifiedDocument?: Maybe<Scalars['Boolean']>;
  payments?: Maybe<Array<Maybe<Payment>>>;
};

export type CertificateInput = {
  collector?: InputMaybe<RelatedPersonInput>;
  data?: InputMaybe<Scalars['String']>;
  hasShowedVerifiedDocument?: InputMaybe<Scalars['Boolean']>;
  payments?: InputMaybe<Array<InputMaybe<PaymentInput>>>;
};

export type CertificateSvg = {
  __typename?: 'CertificateSVG';
  event: Scalars['String'];
  id: Scalars['ID'];
  status: Scalars['String'];
  svgCode: Scalars['String'];
  svgDateCreated: Scalars['String'];
  svgDateUpdated: Scalars['String'];
  svgFilename: Scalars['String'];
  user: Scalars['String'];
};

export type CertificateSvgInput = {
  event: Scalars['String'];
  id: Scalars['ID'];
  status: Scalars['String'];
  svgCode: Scalars['String'];
  svgDateCreated?: InputMaybe<Scalars['Int']>;
  svgDateUpdated?: InputMaybe<Scalars['Int']>;
  svgFilename: Scalars['String'];
  user: Scalars['String'];
};

export type CertificationMetric = {
  __typename?: 'CertificationMetric';
  eventType: Scalars['String'];
  total: Scalars['Float'];
};

export type Comment = {
  __typename?: 'Comment';
  comment?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['Date']>;
  id: Scalars['ID'];
  user?: Maybe<User>;
};

export type CommentInput = {
  comment?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['Date']>;
  user?: InputMaybe<UserInput>;
};

export type ComparisonInput = {
  eq?: InputMaybe<Scalars['String']>;
  gt?: InputMaybe<Scalars['String']>;
  gte?: InputMaybe<Scalars['String']>;
  in?: InputMaybe<Array<Scalars['String']>>;
  lt?: InputMaybe<Scalars['String']>;
  lte?: InputMaybe<Scalars['String']>;
  ne?: InputMaybe<Scalars['String']>;
  nin?: InputMaybe<Array<Scalars['String']>>;
};

export type ContactPoint = {
  __typename?: 'ContactPoint';
  system?: Maybe<Scalars['String']>;
  use?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type ContactPointInput = {
  system?: InputMaybe<Scalars['String']>;
  use?: InputMaybe<Scalars['String']>;
  value?: InputMaybe<Scalars['String']>;
};

export type CorrectionInput = {
  attestedAndCopied?: InputMaybe<Scalars['Boolean']>;
  data?: InputMaybe<Scalars['String']>;
  hasShowedVerifiedDocument?: InputMaybe<Scalars['Boolean']>;
  location?: InputMaybe<LocationInput>;
  noSupportingDocumentationRequired?: InputMaybe<Scalars['Boolean']>;
  note?: InputMaybe<Scalars['String']>;
  payments?: InputMaybe<Array<InputMaybe<PaymentInput>>>;
  reason?: InputMaybe<Scalars['String']>;
  requester?: InputMaybe<Scalars['ID']>;
  values?: InputMaybe<Array<InputMaybe<CorrectionValueInput>>>;
};

export type CorrectionMetric = {
  __typename?: 'CorrectionMetric';
  reason: Scalars['String'];
  total: Scalars['Float'];
};

export type CorrectionValueInput = {
  fieldName?: InputMaybe<Scalars['String']>;
  newValue?: InputMaybe<Scalars['String']>;
  oldValue?: InputMaybe<Scalars['String']>;
  section?: InputMaybe<Scalars['String']>;
};

export type CountryLogo = {
  __typename?: 'CountryLogo';
  file?: Maybe<Scalars['String']>;
  fileName?: Maybe<Scalars['String']>;
};

export type CountryLogoInput = {
  file?: InputMaybe<Scalars['String']>;
  fileName?: InputMaybe<Scalars['String']>;
};

export type CreatedIds = {
  __typename?: 'CreatedIds';
  compositionId?: Maybe<Scalars['String']>;
  registrationNumber?: Maybe<Scalars['String']>;
  trackingId?: Maybe<Scalars['String']>;
};

export type Currency = {
  __typename?: 'Currency';
  isoCode?: Maybe<Scalars['String']>;
  languagesAndCountry?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type CurrencyInput = {
  isoCode?: InputMaybe<Scalars['String']>;
  languagesAndCountry?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export enum CustomFieldType {
  Number = 'NUMBER',
  Paragraph = 'PARAGRAPH',
  Subsection = 'SUBSECTION',
  Tel = 'TEL',
  Text = 'TEXT',
  Textarea = 'TEXTAREA'
}

export type Death = {
  __typename?: 'Death';
  FEE?: Maybe<DeathFee>;
  REGISTRATION_TARGET?: Maybe<Scalars['Int']>;
};

export type DeathEventSearchSet = EventSearchSet & {
  __typename?: 'DeathEventSearchSet';
  dateOfDeath?: Maybe<Scalars['Date']>;
  deceasedName?: Maybe<Array<Maybe<HumanName>>>;
  id: Scalars['ID'];
  registration?: Maybe<RegistrationSearchSet>;
  type?: Maybe<Scalars['String']>;
};

export type DeathFee = {
  __typename?: 'DeathFee';
  DELAYED?: Maybe<Scalars['Float']>;
  ON_TIME?: Maybe<Scalars['Float']>;
};

export type DeathFeeInput = {
  DELAYED?: InputMaybe<Scalars['Float']>;
  ON_TIME?: InputMaybe<Scalars['Float']>;
};

export type DeathInput = {
  FEE?: InputMaybe<DeathFeeInput>;
  REGISTRATION_TARGET?: InputMaybe<Scalars['Int']>;
};

export type DeathRegistration = EventRegistration & {
  __typename?: 'DeathRegistration';
  _fhirIDMap?: Maybe<Scalars['Map']>;
  causeOfDeath?: Maybe<Scalars['String']>;
  causeOfDeathEstablished?: Maybe<Scalars['String']>;
  causeOfDeathMethod?: Maybe<CauseOfDeathMethodType>;
  createdAt?: Maybe<Scalars['Date']>;
  deathDescription?: Maybe<Scalars['String']>;
  deceased?: Maybe<Person>;
  eventLocation?: Maybe<Location>;
  father?: Maybe<Person>;
  femaleDependentsOfDeceased?: Maybe<Scalars['Float']>;
  history?: Maybe<Array<Maybe<History>>>;
  id: Scalars['ID'];
  informant?: Maybe<RelatedPerson>;
  maleDependentsOfDeceased?: Maybe<Scalars['Float']>;
  mannerOfDeath?: Maybe<MannerOfDeath>;
  medicalPractitioner?: Maybe<MedicalPractitioner>;
  mother?: Maybe<Person>;
  questionnaire?: Maybe<Array<Maybe<QuestionnaireQuestion>>>;
  registration?: Maybe<Registration>;
  spouse?: Maybe<Person>;
  updatedAt?: Maybe<Scalars['Date']>;
};

export type DeathRegistrationInput = {
  _fhirIDMap?: InputMaybe<Scalars['Map']>;
  causeOfDeath?: InputMaybe<Scalars['String']>;
  causeOfDeathEstablished?: InputMaybe<Scalars['String']>;
  causeOfDeathMethod?: InputMaybe<CauseOfDeathMethodType>;
  createdAt?: InputMaybe<Scalars['Date']>;
  deathDescription?: InputMaybe<Scalars['String']>;
  deceased?: InputMaybe<PersonInput>;
  eventLocation?: InputMaybe<LocationInput>;
  father?: InputMaybe<PersonInput>;
  femaleDependentsOfDeceased?: InputMaybe<Scalars['Float']>;
  informant?: InputMaybe<RelatedPersonInput>;
  maleDependentsOfDeceased?: InputMaybe<Scalars['Float']>;
  mannerOfDeath?: InputMaybe<MannerOfDeath>;
  medicalPractitioner?: InputMaybe<MedicalPractitionerInput>;
  mother?: InputMaybe<PersonInput>;
  questionnaire?: InputMaybe<Array<InputMaybe<QuestionnaireQuestionInput>>>;
  registration?: InputMaybe<RegistrationInput>;
  spouse?: InputMaybe<PersonInput>;
  updatedAt?: InputMaybe<Scalars['Date']>;
};

export type Deceased = {
  __typename?: 'Deceased';
  deathDate?: Maybe<Scalars['String']>;
  deceased?: Maybe<Scalars['Boolean']>;
};

export type DeceasedInput = {
  deathDate?: InputMaybe<Scalars['String']>;
  deceased?: InputMaybe<Scalars['Boolean']>;
};

export type DeclarationsStartedMetrics = {
  __typename?: 'DeclarationsStartedMetrics';
  fieldAgentDeclarations: Scalars['Int'];
  hospitalDeclarations: Scalars['Int'];
  officeDeclarations: Scalars['Int'];
};

export type DeleteFormDraftInput = {
  event: Event;
};

export type DraftHistory = {
  __typename?: 'DraftHistory';
  _id: Scalars['ID'];
  comment: Scalars['String'];
  status: DraftStatus;
  updatedAt: Scalars['Date'];
  version: Scalars['Int'];
};

export enum DraftStatus {
  Draft = 'DRAFT',
  InPreview = 'IN_PREVIEW',
  Published = 'PUBLISHED'
}

export type Dummy = {
  __typename?: 'Dummy';
  dummy: Scalars['String'];
};

export enum EducationType {
  FirstStageTertiaryIsced_5 = 'FIRST_STAGE_TERTIARY_ISCED_5',
  LowerSecondaryIsced_2 = 'LOWER_SECONDARY_ISCED_2',
  NotStated = 'NOT_STATED',
  NoSchooling = 'NO_SCHOOLING',
  PostSecondaryIsced_4 = 'POST_SECONDARY_ISCED_4',
  PrimaryIsced_1 = 'PRIMARY_ISCED_1',
  SecondStageTertiaryIsced_6 = 'SECOND_STAGE_TERTIARY_ISCED_6',
  UpperSecondaryIsced_3 = 'UPPER_SECONDARY_ISCED_3'
}

export type Estimation = {
  __typename?: 'Estimation';
  estimationYear: Scalars['Int'];
  femaleEstimation: Scalars['Int'];
  locationId: Scalars['String'];
  locationLevel: Scalars['String'];
  maleEstimation: Scalars['Int'];
  totalEstimation: Scalars['Int'];
};

export enum Event {
  Birth = 'birth',
  Death = 'death'
}

export type EventMetrics = {
  __typename?: 'EventMetrics';
  eventLocationType: Scalars['String'];
  gender: Scalars['String'];
  practitionerRole: Scalars['String'];
  timeLabel: Scalars['String'];
  total: Scalars['Int'];
};

export type EventProgressData = {
  __typename?: 'EventProgressData';
  timeInProgress?: Maybe<Scalars['Int']>;
  timeInReadyForReview?: Maybe<Scalars['Int']>;
  timeInReadyToPrint?: Maybe<Scalars['Int']>;
  timeInRequiresUpdates?: Maybe<Scalars['Int']>;
  timeInWaitingForApproval?: Maybe<Scalars['Int']>;
  timeInWaitingForBRIS?: Maybe<Scalars['Int']>;
};

export type EventProgressResultSet = {
  __typename?: 'EventProgressResultSet';
  results?: Maybe<Array<Maybe<EventProgressSet>>>;
  totalItems?: Maybe<Scalars['Int']>;
};

export type EventProgressSet = {
  __typename?: 'EventProgressSet';
  dateOfEvent?: Maybe<Scalars['Date']>;
  id: Scalars['ID'];
  name?: Maybe<Array<Maybe<HumanName>>>;
  progressReport?: Maybe<EventProgressData>;
  registration?: Maybe<RegistrationSearchSet>;
  startedAt?: Maybe<Scalars['Date']>;
  startedBy?: Maybe<User>;
  startedByFacility?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type EventRegistration = {
  createdAt?: Maybe<Scalars['Date']>;
  history?: Maybe<Array<Maybe<History>>>;
  id: Scalars['ID'];
  registration?: Maybe<Registration>;
};

export type EventSearchResultSet = {
  __typename?: 'EventSearchResultSet';
  results?: Maybe<Array<Maybe<EventSearchSet>>>;
  totalItems?: Maybe<Scalars['Int']>;
};

export type EventSearchSet = {
  id: Scalars['ID'];
  registration?: Maybe<RegistrationSearchSet>;
  type?: Maybe<Scalars['String']>;
};

export type FormDraft = {
  __typename?: 'FormDraft';
  _id: Scalars['ID'];
  comment: Scalars['String'];
  createdAt: Scalars['Date'];
  event: Event;
  history: Array<DraftHistory>;
  status: DraftStatus;
  updatedAt: Scalars['Date'];
  version: Scalars['Int'];
};

export type FormDraftInput = {
  comment: Scalars['String'];
  event: Event;
  questions: Array<QuestionInput>;
};

export type FormDraftStatusModifyInput = {
  event: Event;
  status: DraftStatus;
};

export type History = {
  __typename?: 'History';
  action?: Maybe<RegStatus>;
  certificates?: Maybe<Array<Maybe<Certificate>>>;
  comments?: Maybe<Array<Maybe<Comment>>>;
  date?: Maybe<Scalars['Date']>;
  dhis2Notification?: Maybe<Scalars['Boolean']>;
  input?: Maybe<Array<Maybe<InputOutput>>>;
  location?: Maybe<Location>;
  office?: Maybe<Location>;
  output?: Maybe<Array<Maybe<InputOutput>>>;
  reason?: Maybe<Scalars['String']>;
  reinstated?: Maybe<Scalars['Boolean']>;
  signature?: Maybe<Signature>;
  statusReason?: Maybe<StatusReason>;
  user?: Maybe<User>;
};

export type HumanName = {
  __typename?: 'HumanName';
  familyName?: Maybe<Scalars['String']>;
  firstNames?: Maybe<Scalars['String']>;
  use?: Maybe<Scalars['String']>;
};

export type HumanNameInput = {
  familyName?: InputMaybe<Scalars['String']>;
  firstNames?: InputMaybe<Scalars['String']>;
  use?: InputMaybe<Scalars['String']>;
};

export type Identifier = {
  __typename?: 'Identifier';
  system?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export enum IdentityIdType {
  AlienNumber = 'ALIEN_NUMBER',
  BirthRegistrationNumber = 'BIRTH_REGISTRATION_NUMBER',
  DeathRegistrationNumber = 'DEATH_REGISTRATION_NUMBER',
  DrivingLicense = 'DRIVING_LICENSE',
  NationalId = 'NATIONAL_ID',
  NoId = 'NO_ID',
  Other = 'OTHER',
  Passport = 'PASSPORT',
  RefugeeNumber = 'REFUGEE_NUMBER',
  SocialSecurityNo = 'SOCIAL_SECURITY_NO'
}

export type IdentityInput = {
  id?: InputMaybe<Scalars['ID']>;
  otherType?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<IdentityIdType>;
};

export type IdentityType = {
  __typename?: 'IdentityType';
  id?: Maybe<Scalars['ID']>;
  otherType?: Maybe<Scalars['String']>;
  type?: Maybe<IdentityIdType>;
};

export enum InformantType {
  Brother = 'BROTHER',
  Daughter = 'DAUGHTER',
  DaughterInLaw = 'DAUGHTER_IN_LAW',
  Father = 'FATHER',
  Granddaughter = 'GRANDDAUGHTER',
  Grandfather = 'GRANDFATHER',
  Grandmother = 'GRANDMOTHER',
  Grandson = 'GRANDSON',
  Informant = 'INFORMANT',
  LegalGuardian = 'LEGAL_GUARDIAN',
  Mother = 'MOTHER',
  Other = 'OTHER',
  OtherFamilyMember = 'OTHER_FAMILY_MEMBER',
  Sister = 'SISTER',
  Son = 'SON',
  SonInLaw = 'SON_IN_LAW',
  Spouse = 'SPOUSE'
}

export type InputOutput = {
  __typename?: 'InputOutput';
  valueCode?: Maybe<Scalars['String']>;
  valueId?: Maybe<Scalars['String']>;
  valueString?: Maybe<Scalars['String']>;
};

export type LocalRegistrar = {
  __typename?: 'LocalRegistrar';
  name: Array<Maybe<HumanName>>;
  role: Scalars['String'];
  signature?: Maybe<Signature>;
};

export type Location = {
  __typename?: 'Location';
  _fhirID?: Maybe<Scalars['ID']>;
  address?: Maybe<Address>;
  alias?: Maybe<Array<Maybe<Scalars['String']>>>;
  altitude?: Maybe<Scalars['Float']>;
  description?: Maybe<Scalars['String']>;
  geoData?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  identifier?: Maybe<Array<Maybe<Identifier>>>;
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  name?: Maybe<Scalars['String']>;
  partOf?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  telecom?: Maybe<Array<Maybe<ContactPoint>>>;
  type?: Maybe<LocationType>;
};

export type LocationInput = {
  _fhirID?: InputMaybe<Scalars['ID']>;
  address?: InputMaybe<AddressInput>;
  alias?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  altitude?: InputMaybe<Scalars['Float']>;
  description?: InputMaybe<Scalars['String']>;
  geoData?: InputMaybe<Scalars['String']>;
  identifier?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  latitude?: InputMaybe<Scalars['Float']>;
  longitude?: InputMaybe<Scalars['Float']>;
  name?: InputMaybe<Scalars['String']>;
  partOf?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<Scalars['String']>;
  telecom?: InputMaybe<Array<InputMaybe<ContactPointInput>>>;
  type?: InputMaybe<LocationType>;
};

export type LocationStatisticsResponse = {
  __typename?: 'LocationStatisticsResponse';
  offices: Scalars['Int'];
  population?: Maybe<Scalars['Int']>;
  registrars: Scalars['Int'];
};

export enum LocationType {
  AdminStructure = 'ADMIN_STRUCTURE',
  CrvsOffice = 'CRVS_OFFICE',
  DeceasedUsualResidence = 'DECEASED_USUAL_RESIDENCE',
  HealthFacility = 'HEALTH_FACILITY',
  Hospital = 'HOSPITAL',
  IdpCamp = 'IDP_CAMP',
  MilitaryBaseOrCantonment = 'MILITARY_BASE_OR_CANTONMENT',
  Other = 'OTHER',
  OtherHealthInstitution = 'OTHER_HEALTH_INSTITUTION',
  PrimaryAddress = 'PRIMARY_ADDRESS',
  PrivateHome = 'PRIVATE_HOME',
  SecondaryAddress = 'SECONDARY_ADDRESS',
  UnhcrCamp = 'UNHCR_CAMP'
}

export type LocationWiseEstimationMetric = {
  __typename?: 'LocationWiseEstimationMetric';
  estimated: Scalars['Int'];
  locationId: Scalars['String'];
  locationName: Scalars['String'];
  total: Scalars['Int'];
  within1Year: Scalars['Int'];
  within5Years: Scalars['Int'];
  withinTarget: Scalars['Int'];
};

export enum MannerOfDeath {
  Accident = 'ACCIDENT',
  Homicide = 'HOMICIDE',
  MannerUndetermined = 'MANNER_UNDETERMINED',
  NaturalCauses = 'NATURAL_CAUSES',
  Suicide = 'SUICIDE'
}

export enum MaritalStatusType {
  Divorced = 'DIVORCED',
  Married = 'MARRIED',
  NotStated = 'NOT_STATED',
  Separated = 'SEPARATED',
  Single = 'SINGLE',
  Widowed = 'WIDOWED'
}

export type MedicalPractitioner = {
  __typename?: 'MedicalPractitioner';
  lastVisitDate?: Maybe<Scalars['Date']>;
  name?: Maybe<Scalars['String']>;
  qualification?: Maybe<Scalars['String']>;
};

export type MedicalPractitionerInput = {
  lastVisitDate?: InputMaybe<Scalars['Date']>;
  name?: InputMaybe<Scalars['String']>;
  qualification?: InputMaybe<Scalars['String']>;
};

export type MesssageDescriptorInput = {
  defaultMessage: Scalars['String'];
  description?: InputMaybe<Scalars['String']>;
  id: Scalars['String'];
};

export type MesssageInput = {
  descriptor: MesssageDescriptorInput;
  lang: Scalars['String'];
};

export type MonthWiseEstimationMetric = {
  __typename?: 'MonthWiseEstimationMetric';
  estimated: Scalars['Int'];
  month: Scalars['Int'];
  total: Scalars['Int'];
  within1Year: Scalars['Int'];
  within5Years: Scalars['Int'];
  withinTarget: Scalars['Int'];
  year: Scalars['Int'];
};

export type Mutation = {
  __typename?: 'Mutation';
  activateUser?: Maybe<Scalars['String']>;
  auditUser?: Maybe<Scalars['String']>;
  changeAvatar?: Maybe<Avatar>;
  changePassword?: Maybe<Scalars['String']>;
  changePhone?: Maybe<Scalars['String']>;
  createBirthRegistration: CreatedIds;
  createDeathRegistration: CreatedIds;
  createFormDraft?: Maybe<FormDraft>;
  createNotification: Notification;
  createOrUpdateCertificateSVG?: Maybe<CertificateSvg>;
  createOrUpdateUser: User;
  deleteFormDraft?: Maybe<Scalars['String']>;
  markBirthAsCertified: Scalars['ID'];
  markBirthAsRegistered: BirthRegistration;
  markBirthAsValidated?: Maybe<Scalars['ID']>;
  markBirthAsVerified?: Maybe<BirthRegistration>;
  markDeathAsCertified: Scalars['ID'];
  markDeathAsRegistered: DeathRegistration;
  markDeathAsValidated?: Maybe<Scalars['ID']>;
  markDeathAsVerified?: Maybe<DeathRegistration>;
  markEventAsArchived: Scalars['ID'];
  markEventAsReinstated?: Maybe<Reinstated>;
  markEventAsUnassigned: Scalars['ID'];
  markEventAsVoided: Scalars['ID'];
  modifyDraftStatus?: Maybe<FormDraft>;
  notADuplicate: Scalars['ID'];
  requestBirthRegistrationCorrection: Scalars['ID'];
  requestDeathRegistrationCorrection: Scalars['ID'];
  resendSMSInvite?: Maybe<Scalars['String']>;
  updateApplicationConfig?: Maybe<ApplicationConfiguration>;
  updateBirthRegistration: Scalars['ID'];
  updateDeathRegistration: Scalars['ID'];
  voidNotification?: Maybe<Notification>;
};


export type MutationActivateUserArgs = {
  password: Scalars['String'];
  securityQNAs: Array<InputMaybe<SecurityQuestionAnswer>>;
  userId: Scalars['String'];
};


export type MutationAuditUserArgs = {
  action: Scalars['String'];
  comment?: InputMaybe<Scalars['String']>;
  reason: Scalars['String'];
  userId: Scalars['String'];
};


export type MutationChangeAvatarArgs = {
  avatar: AvatarInput;
  userId: Scalars['String'];
};


export type MutationChangePasswordArgs = {
  existingPassword: Scalars['String'];
  password: Scalars['String'];
  userId: Scalars['String'];
};


export type MutationChangePhoneArgs = {
  nonce: Scalars['String'];
  phoneNumber: Scalars['String'];
  userId: Scalars['String'];
  verifyCode: Scalars['String'];
};


export type MutationCreateBirthRegistrationArgs = {
  details: BirthRegistrationInput;
};


export type MutationCreateDeathRegistrationArgs = {
  details: DeathRegistrationInput;
};


export type MutationCreateFormDraftArgs = {
  formDraft: FormDraftInput;
};


export type MutationCreateNotificationArgs = {
  details: NotificationInput;
};


export type MutationCreateOrUpdateCertificateSvgArgs = {
  certificateSVG: CertificateSvgInput;
};


export type MutationCreateOrUpdateUserArgs = {
  user: UserInput;
};


export type MutationDeleteFormDraftArgs = {
  formDraft: DeleteFormDraftInput;
};


export type MutationMarkBirthAsCertifiedArgs = {
  details: BirthRegistrationInput;
  id: Scalars['ID'];
};


export type MutationMarkBirthAsRegisteredArgs = {
  details: BirthRegistrationInput;
  id: Scalars['ID'];
};


export type MutationMarkBirthAsValidatedArgs = {
  details?: InputMaybe<BirthRegistrationInput>;
  id: Scalars['ID'];
};


export type MutationMarkBirthAsVerifiedArgs = {
  details?: InputMaybe<BirthRegistrationInput>;
  id: Scalars['ID'];
};


export type MutationMarkDeathAsCertifiedArgs = {
  details: DeathRegistrationInput;
  id: Scalars['ID'];
};


export type MutationMarkDeathAsRegisteredArgs = {
  details: DeathRegistrationInput;
  id: Scalars['ID'];
};


export type MutationMarkDeathAsValidatedArgs = {
  details?: InputMaybe<DeathRegistrationInput>;
  id: Scalars['ID'];
};


export type MutationMarkDeathAsVerifiedArgs = {
  details?: InputMaybe<DeathRegistrationInput>;
  id: Scalars['ID'];
};


export type MutationMarkEventAsArchivedArgs = {
  id: Scalars['String'];
};


export type MutationMarkEventAsReinstatedArgs = {
  id: Scalars['String'];
};


export type MutationMarkEventAsUnassignedArgs = {
  id: Scalars['String'];
};


export type MutationMarkEventAsVoidedArgs = {
  comment?: InputMaybe<Scalars['String']>;
  id: Scalars['String'];
  reason: Scalars['String'];
};


export type MutationModifyDraftStatusArgs = {
  formDraft: FormDraftStatusModifyInput;
};


export type MutationNotADuplicateArgs = {
  duplicateId: Scalars['String'];
  id: Scalars['String'];
};


export type MutationRequestBirthRegistrationCorrectionArgs = {
  details: BirthRegistrationInput;
  id: Scalars['ID'];
};


export type MutationRequestDeathRegistrationCorrectionArgs = {
  details: DeathRegistrationInput;
  id: Scalars['ID'];
};


export type MutationResendSmsInviteArgs = {
  userId: Scalars['String'];
};


export type MutationUpdateApplicationConfigArgs = {
  applicationConfig?: InputMaybe<ApplicationConfigurationInput>;
};


export type MutationUpdateBirthRegistrationArgs = {
  details: BirthRegistrationInput;
  id: Scalars['ID'];
};


export type MutationUpdateDeathRegistrationArgs = {
  details: DeathRegistrationInput;
  id: Scalars['ID'];
};


export type MutationVoidNotificationArgs = {
  id: Scalars['ID'];
};

export type Notification = {
  __typename?: 'Notification';
  child?: Maybe<Person>;
  createdAt?: Maybe<Scalars['Date']>;
  father?: Maybe<Person>;
  id: Scalars['ID'];
  informant?: Maybe<Person>;
  location?: Maybe<Location>;
  mother?: Maybe<Person>;
  updatedAt?: Maybe<Scalars['Date']>;
};

export type NotificationInput = {
  child?: InputMaybe<PersonInput>;
  createdAt?: InputMaybe<Scalars['Date']>;
  father?: InputMaybe<PersonInput>;
  informant?: InputMaybe<PersonInput>;
  location?: InputMaybe<LocationInput>;
  mother?: InputMaybe<PersonInput>;
  updatedAt?: InputMaybe<Scalars['Date']>;
};

export type Payment = {
  __typename?: 'Payment';
  amount?: Maybe<Scalars['Float']>;
  date?: Maybe<Scalars['Date']>;
  outcome?: Maybe<PaymentOutcomeType>;
  paymentId?: Maybe<Scalars['ID']>;
  total?: Maybe<Scalars['Float']>;
  type?: Maybe<PaymentType>;
};

export type PaymentInput = {
  amount?: InputMaybe<Scalars['Float']>;
  data?: InputMaybe<Scalars['String']>;
  date?: InputMaybe<Scalars['Date']>;
  outcome?: InputMaybe<PaymentOutcomeType>;
  paymentId?: InputMaybe<Scalars['ID']>;
  total?: InputMaybe<Scalars['Float']>;
  type?: InputMaybe<PaymentType>;
};

export type PaymentMetric = {
  __typename?: 'PaymentMetric';
  paymentType: Scalars['String'];
  total: Scalars['Float'];
};

export enum PaymentOutcomeType {
  Completed = 'COMPLETED',
  Error = 'ERROR',
  Partial = 'PARTIAL'
}

export enum PaymentType {
  Manual = 'MANUAL'
}

export type Person = {
  __typename?: 'Person';
  _fhirID?: Maybe<Scalars['ID']>;
  address?: Maybe<Array<Maybe<Address>>>;
  age?: Maybe<Scalars['Float']>;
  birthDate?: Maybe<Scalars['String']>;
  dateOfMarriage?: Maybe<Scalars['Date']>;
  deceased?: Maybe<Deceased>;
  detailsExist?: Maybe<Scalars['Boolean']>;
  educationalAttainment?: Maybe<EducationType>;
  gender?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  identifier?: Maybe<Array<Maybe<IdentityType>>>;
  maritalStatus?: Maybe<MaritalStatusType>;
  multipleBirth?: Maybe<Scalars['Int']>;
  name?: Maybe<Array<Maybe<HumanName>>>;
  nationality?: Maybe<Array<Maybe<Scalars['String']>>>;
  occupation?: Maybe<Scalars['String']>;
  photo?: Maybe<Array<Maybe<Attachment>>>;
  reasonNotApplying?: Maybe<Scalars['String']>;
  telecom?: Maybe<Array<Maybe<ContactPoint>>>;
};

export type PersonInput = {
  _fhirID?: InputMaybe<Scalars['ID']>;
  address?: InputMaybe<Array<InputMaybe<AddressInput>>>;
  age?: InputMaybe<Scalars['Float']>;
  birthDate?: InputMaybe<Scalars['String']>;
  dateOfMarriage?: InputMaybe<Scalars['Date']>;
  deceased?: InputMaybe<DeceasedInput>;
  detailsExist?: InputMaybe<Scalars['Boolean']>;
  educationalAttainment?: InputMaybe<EducationType>;
  gender?: InputMaybe<Scalars['String']>;
  identifier?: InputMaybe<Array<InputMaybe<IdentityInput>>>;
  maritalStatus?: InputMaybe<MaritalStatusType>;
  multipleBirth?: InputMaybe<Scalars['Int']>;
  name?: InputMaybe<Array<InputMaybe<HumanNameInput>>>;
  nationality?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  occupation?: InputMaybe<Scalars['String']>;
  photo?: InputMaybe<Array<AttachmentInput>>;
  reasonNotApplying?: InputMaybe<Scalars['String']>;
  telecom?: InputMaybe<Array<InputMaybe<ContactPointInput>>>;
};

export type Query = {
  __typename?: 'Query';
  fetchBirthRegistration?: Maybe<BirthRegistration>;
  fetchDeathRegistration?: Maybe<DeathRegistration>;
  fetchEventRegistration?: Maybe<EventRegistration>;
  fetchLocationWiseEventMetrics?: Maybe<Array<LocationWiseEstimationMetric>>;
  fetchMonthWiseEventMetrics?: Maybe<Array<MonthWiseEstimationMetric>>;
  fetchRegistration?: Maybe<EventRegistration>;
  fetchRegistrationCountByStatus?: Maybe<RegistrationCountResult>;
  fetchTimeLoggedMetricsByPractitioner?: Maybe<TimeLoggedMetricsResultSet>;
  getActiveCertificatesSVG?: Maybe<Array<Maybe<CertificateSvg>>>;
  getCertificateSVG?: Maybe<CertificateSvg>;
  getDeclarationsStartedMetrics?: Maybe<DeclarationsStartedMetrics>;
  getEventsWithProgress?: Maybe<EventProgressResultSet>;
  getFormDraft?: Maybe<Array<FormDraft>>;
  getLocationStatistics?: Maybe<LocationStatisticsResponse>;
  getRoles?: Maybe<Array<Maybe<Role>>>;
  getTotalCertifications?: Maybe<Array<CertificationMetric>>;
  getTotalCorrections?: Maybe<Array<CorrectionMetric>>;
  getTotalMetrics?: Maybe<TotalMetricsResult>;
  getTotalPayments?: Maybe<Array<PaymentMetric>>;
  getUser?: Maybe<User>;
  getUserByMobile?: Maybe<User>;
  hasChildLocation?: Maybe<Location>;
  listBirthRegistrations?: Maybe<BirthRegResultSet>;
  listNotifications?: Maybe<Array<Maybe<Notification>>>;
  locationById?: Maybe<Location>;
  locationsByParent?: Maybe<Array<Maybe<Location>>>;
  queryPersonByIdentifier?: Maybe<Person>;
  queryPersonByNidIdentifier?: Maybe<Person>;
  queryRegistrationByIdentifier?: Maybe<BirthRegistration>;
  searchBirthRegistrations?: Maybe<Array<Maybe<BirthRegistration>>>;
  searchDeathRegistrations?: Maybe<Array<Maybe<DeathRegistration>>>;
  searchEvents?: Maybe<EventSearchResultSet>;
  searchFieldAgents?: Maybe<SearchFieldAgentResult>;
  searchUsers?: Maybe<SearchUserResult>;
  verifyPasswordById?: Maybe<VerifyPasswordResult>;
};


export type QueryFetchBirthRegistrationArgs = {
  id: Scalars['ID'];
};


export type QueryFetchDeathRegistrationArgs = {
  id: Scalars['ID'];
};


export type QueryFetchEventRegistrationArgs = {
  id: Scalars['ID'];
};


export type QueryFetchLocationWiseEventMetricsArgs = {
  event: Scalars['String'];
  locationId?: InputMaybe<Scalars['String']>;
  timeEnd: Scalars['String'];
  timeStart: Scalars['String'];
};


export type QueryFetchMonthWiseEventMetricsArgs = {
  event: Scalars['String'];
  locationId?: InputMaybe<Scalars['String']>;
  timeEnd: Scalars['String'];
  timeStart: Scalars['String'];
};


export type QueryFetchRegistrationArgs = {
  id: Scalars['ID'];
};


export type QueryFetchRegistrationCountByStatusArgs = {
  event?: InputMaybe<Scalars['String']>;
  locationId?: InputMaybe<Scalars['String']>;
  status: Array<InputMaybe<Scalars['String']>>;
};


export type QueryFetchTimeLoggedMetricsByPractitionerArgs = {
  count: Scalars['Int'];
  locationId: Scalars['String'];
  practitionerId: Scalars['String'];
  timeEnd: Scalars['String'];
  timeStart: Scalars['String'];
};


export type QueryGetCertificateSvgArgs = {
  event?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<Scalars['String']>;
};


export type QueryGetDeclarationsStartedMetricsArgs = {
  locationId: Scalars['String'];
  timeEnd: Scalars['String'];
  timeStart: Scalars['String'];
};


export type QueryGetEventsWithProgressArgs = {
  count?: InputMaybe<Scalars['Int']>;
  locationId?: InputMaybe<Scalars['String']>;
  skip?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  type?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


export type QueryGetLocationStatisticsArgs = {
  locationId?: InputMaybe<Scalars['String']>;
  populationYear: Scalars['Int'];
};


export type QueryGetRolesArgs = {
  active?: InputMaybe<Scalars['Boolean']>;
  sortBy?: InputMaybe<Scalars['String']>;
  sortOrder?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<Scalars['String']>;
  value?: InputMaybe<ComparisonInput>;
};


export type QueryGetTotalCertificationsArgs = {
  locationId?: InputMaybe<Scalars['String']>;
  timeEnd: Scalars['String'];
  timeStart: Scalars['String'];
};


export type QueryGetTotalCorrectionsArgs = {
  event: Scalars['String'];
  locationId?: InputMaybe<Scalars['String']>;
  timeEnd: Scalars['String'];
  timeStart: Scalars['String'];
};


export type QueryGetTotalMetricsArgs = {
  event: Scalars['String'];
  locationId?: InputMaybe<Scalars['String']>;
  timeEnd: Scalars['String'];
  timeStart: Scalars['String'];
};


export type QueryGetTotalPaymentsArgs = {
  event: Scalars['String'];
  locationId?: InputMaybe<Scalars['String']>;
  timeEnd: Scalars['String'];
  timeStart: Scalars['String'];
};


export type QueryGetUserArgs = {
  userId?: InputMaybe<Scalars['String']>;
};


export type QueryGetUserByMobileArgs = {
  mobile?: InputMaybe<Scalars['String']>;
};


export type QueryHasChildLocationArgs = {
  parentId?: InputMaybe<Scalars['String']>;
};


export type QueryListBirthRegistrationsArgs = {
  count?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Scalars['Date']>;
  locationIds?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  skip?: InputMaybe<Scalars['Int']>;
  status?: InputMaybe<Scalars['String']>;
  to?: InputMaybe<Scalars['Date']>;
  userId?: InputMaybe<Scalars['String']>;
};


export type QueryListNotificationsArgs = {
  from?: InputMaybe<Scalars['Date']>;
  locationIds?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  status?: InputMaybe<Scalars['String']>;
  to?: InputMaybe<Scalars['Date']>;
  userId?: InputMaybe<Scalars['String']>;
};


export type QueryLocationByIdArgs = {
  locationId?: InputMaybe<Scalars['String']>;
};


export type QueryLocationsByParentArgs = {
  parentId?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<Scalars['String']>;
};


export type QueryQueryPersonByIdentifierArgs = {
  identifier: Scalars['ID'];
};


export type QueryQueryPersonByNidIdentifierArgs = {
  country?: InputMaybe<Scalars['String']>;
  dob?: InputMaybe<Scalars['String']>;
  nid?: InputMaybe<Scalars['String']>;
};


export type QueryQueryRegistrationByIdentifierArgs = {
  identifier: Scalars['ID'];
};


export type QuerySearchBirthRegistrationsArgs = {
  fromDate?: InputMaybe<Scalars['Date']>;
  toDate?: InputMaybe<Scalars['Date']>;
};


export type QuerySearchDeathRegistrationsArgs = {
  fromDate?: InputMaybe<Scalars['Date']>;
  toDate?: InputMaybe<Scalars['Date']>;
};


export type QuerySearchEventsArgs = {
  contactNumber?: InputMaybe<Scalars['String']>;
  count?: InputMaybe<Scalars['Int']>;
  locationIds?: InputMaybe<Array<Scalars['String']>>;
  name?: InputMaybe<Scalars['String']>;
  registrationNumber?: InputMaybe<Scalars['String']>;
  skip?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<Scalars['String']>;
  sortColumn?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  trackingId?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  userId?: InputMaybe<Scalars['String']>;
};


export type QuerySearchFieldAgentsArgs = {
  count?: InputMaybe<Scalars['Int']>;
  event?: InputMaybe<Scalars['String']>;
  language?: InputMaybe<Scalars['String']>;
  locationId?: InputMaybe<Scalars['String']>;
  primaryOfficeId?: InputMaybe<Scalars['String']>;
  skip?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<Scalars['String']>;
  timeEnd: Scalars['String'];
  timeStart: Scalars['String'];
};


export type QuerySearchUsersArgs = {
  count?: InputMaybe<Scalars['Int']>;
  locationId?: InputMaybe<Scalars['String']>;
  mobile?: InputMaybe<Scalars['String']>;
  primaryOfficeId?: InputMaybe<Scalars['String']>;
  role?: InputMaybe<Scalars['String']>;
  skip?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<Scalars['String']>;
  username?: InputMaybe<Scalars['String']>;
};


export type QueryVerifyPasswordByIdArgs = {
  id: Scalars['String'];
  password: Scalars['String'];
};

export type QuestionInput = {
  custom?: InputMaybe<Scalars['Boolean']>;
  description?: InputMaybe<Array<MesssageInput>>;
  enabled?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Array<MesssageInput>>;
  fieldId: Scalars['String'];
  fieldName?: InputMaybe<Scalars['String']>;
  fieldType?: InputMaybe<CustomFieldType>;
  label?: InputMaybe<Array<MesssageInput>>;
  maxLength?: InputMaybe<Scalars['Int']>;
  placeholder?: InputMaybe<Array<MesssageInput>>;
  precedingFieldId: Scalars['String'];
  required?: InputMaybe<Scalars['Boolean']>;
  tooltip?: InputMaybe<Array<MesssageInput>>;
};

export type QuestionnaireQuestion = {
  __typename?: 'QuestionnaireQuestion';
  fieldId?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type QuestionnaireQuestionInput = {
  fieldId?: InputMaybe<Scalars['String']>;
  value?: InputMaybe<Scalars['String']>;
};

export enum RegStatus {
  Archived = 'ARCHIVED',
  Certified = 'CERTIFIED',
  DeclarationUpdated = 'DECLARATION_UPDATED',
  Declared = 'DECLARED',
  Downloaded = 'DOWNLOADED',
  InProgress = 'IN_PROGRESS',
  Registered = 'REGISTERED',
  Rejected = 'REJECTED',
  RequestedCorrection = 'REQUESTED_CORRECTION',
  Validated = 'VALIDATED',
  WaitingValidation = 'WAITING_VALIDATION'
}

export type RegWorkflow = {
  __typename?: 'RegWorkflow';
  comments?: Maybe<Array<Maybe<Comment>>>;
  id: Scalars['ID'];
  location?: Maybe<Location>;
  office?: Maybe<Location>;
  reason?: Maybe<Scalars['String']>;
  timeLogged?: Maybe<Scalars['Int']>;
  timestamp?: Maybe<Scalars['Date']>;
  type?: Maybe<RegStatus>;
  user?: Maybe<User>;
};

export type RegWorkflowInput = {
  comments?: InputMaybe<Array<InputMaybe<CommentInput>>>;
  location?: InputMaybe<LocationInput>;
  reason?: InputMaybe<Scalars['String']>;
  timeLoggedMS?: InputMaybe<Scalars['Int']>;
  timestamp?: InputMaybe<Scalars['Date']>;
  type?: InputMaybe<RegStatus>;
  user?: InputMaybe<UserInput>;
};

export type Registration = {
  __typename?: 'Registration';
  _fhirID?: Maybe<Scalars['ID']>;
  assignment?: Maybe<AssignmentData>;
  attachments?: Maybe<Array<Maybe<Attachment>>>;
  book?: Maybe<Scalars['String']>;
  certificates?: Maybe<Array<Maybe<Certificate>>>;
  contact?: Maybe<Scalars['String']>;
  contactPhoneNumber?: Maybe<Scalars['String']>;
  contactRelationship?: Maybe<Scalars['String']>;
  draftId?: Maybe<Scalars['String']>;
  duplicates?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id?: Maybe<Scalars['ID']>;
  inCompleteFields?: Maybe<Scalars['String']>;
  informantType?: Maybe<InformantType>;
  otherInformantType?: Maybe<Scalars['String']>;
  page?: Maybe<Scalars['String']>;
  paperFormID?: Maybe<Scalars['String']>;
  registrationNumber?: Maybe<Scalars['String']>;
  status?: Maybe<Array<Maybe<RegWorkflow>>>;
  trackingId?: Maybe<Scalars['String']>;
  type?: Maybe<RegistrationType>;
};

export type RegistrationCountResult = {
  __typename?: 'RegistrationCountResult';
  results: Array<Maybe<StatusWiseRegistrationCount>>;
  total: Scalars['Int'];
};

export type RegistrationInput = {
  _fhirID?: InputMaybe<Scalars['ID']>;
  attachments?: InputMaybe<Array<AttachmentInput>>;
  book?: InputMaybe<Scalars['String']>;
  certificates?: InputMaybe<Array<InputMaybe<CertificateInput>>>;
  contact?: InputMaybe<Scalars['String']>;
  contactPhoneNumber?: InputMaybe<Scalars['String']>;
  contactRelationship?: InputMaybe<Scalars['String']>;
  correction?: InputMaybe<CorrectionInput>;
  draftId?: InputMaybe<Scalars['String']>;
  inCompleteFields?: InputMaybe<Scalars['String']>;
  informantType?: InputMaybe<InformantType>;
  location?: InputMaybe<LocationInput>;
  otherInformantType?: InputMaybe<Scalars['String']>;
  page?: InputMaybe<Scalars['String']>;
  paperFormID?: InputMaybe<Scalars['String']>;
  registrationNumber?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<Array<InputMaybe<RegWorkflowInput>>>;
  trackingId?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<RegistrationType>;
};

export type RegistrationSearchSet = {
  __typename?: 'RegistrationSearchSet';
  assignment?: Maybe<AssignmentData>;
  comment?: Maybe<Scalars['String']>;
  contactNumber?: Maybe<Scalars['String']>;
  contactRelationship?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  dateOfDeclaration?: Maybe<Scalars['Date']>;
  duplicates?: Maybe<Array<Maybe<Scalars['ID']>>>;
  eventLocationId?: Maybe<Scalars['String']>;
  modifiedAt?: Maybe<Scalars['String']>;
  reason?: Maybe<Scalars['String']>;
  registeredLocationId?: Maybe<Scalars['String']>;
  registrationNumber?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  trackingId?: Maybe<Scalars['String']>;
};

export enum RegistrationType {
  Birth = 'BIRTH',
  Death = 'DEATH'
}

export type Reinstated = {
  __typename?: 'Reinstated';
  registrationStatus?: Maybe<RegStatus>;
  taskEntryResourceID: Scalars['ID'];
};

export type RelatedPerson = {
  __typename?: 'RelatedPerson';
  _fhirID?: Maybe<Scalars['ID']>;
  affidavit?: Maybe<Array<Maybe<Attachment>>>;
  id?: Maybe<Scalars['ID']>;
  individual?: Maybe<Person>;
  otherRelationship?: Maybe<Scalars['String']>;
  relationship?: Maybe<Scalars['String']>;
};

export type RelatedPersonInput = {
  _fhirID?: InputMaybe<Scalars['ID']>;
  affidavit?: InputMaybe<Array<AttachmentInput>>;
  id?: InputMaybe<Scalars['ID']>;
  individual?: InputMaybe<PersonInput>;
  otherRelationship?: InputMaybe<Scalars['String']>;
  relationship?: InputMaybe<Scalars['String']>;
};

export type Role = {
  __typename?: 'Role';
  active?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  title?: Maybe<Scalars['String']>;
  types?: Maybe<Array<Maybe<Scalars['String']>>>;
  value?: Maybe<Scalars['String']>;
};

export type SearchFieldAgentResponse = {
  __typename?: 'SearchFieldAgentResponse';
  avatar?: Maybe<Avatar>;
  averageTimeForDeclaredDeclarations?: Maybe<Scalars['Int']>;
  creationDate?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  practitionerId?: Maybe<Scalars['String']>;
  primaryOfficeId?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  totalNumberOfDeclarationStarted?: Maybe<Scalars['Int']>;
  totalNumberOfInProgressAppStarted?: Maybe<Scalars['Int']>;
  totalNumberOfRejectedDeclarations?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
};

export type SearchFieldAgentResult = {
  __typename?: 'SearchFieldAgentResult';
  results?: Maybe<Array<Maybe<SearchFieldAgentResponse>>>;
  totalItems?: Maybe<Scalars['Int']>;
};

export type SearchUserResult = {
  __typename?: 'SearchUserResult';
  results?: Maybe<Array<Maybe<User>>>;
  totalItems?: Maybe<Scalars['Int']>;
};

export type SecurityQuestionAnswer = {
  answer?: InputMaybe<Scalars['String']>;
  questionKey?: InputMaybe<Scalars['String']>;
};

export type Signature = {
  __typename?: 'Signature';
  data?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type SignatureInput = {
  data: Scalars['String'];
  type?: InputMaybe<Scalars['String']>;
};

export type StatusReason = {
  __typename?: 'StatusReason';
  text?: Maybe<Scalars['String']>;
};

export type StatusWiseRegistrationCount = {
  __typename?: 'StatusWiseRegistrationCount';
  count: Scalars['Int'];
  status: Scalars['String'];
};

export type TimeLoggedMetrics = {
  __typename?: 'TimeLoggedMetrics';
  eventType: Scalars['String'];
  status: Scalars['String'];
  time: Scalars['String'];
  trackingId?: Maybe<Scalars['String']>;
};

export type TimeLoggedMetricsResultSet = {
  __typename?: 'TimeLoggedMetricsResultSet';
  results?: Maybe<Array<Maybe<TimeLoggedMetrics>>>;
  totalItems?: Maybe<Scalars['Int']>;
};

export type TotalMetricsResult = {
  __typename?: 'TotalMetricsResult';
  estimated: Estimation;
  results: Array<EventMetrics>;
};

export type User = {
  __typename?: 'User';
  avatar?: Maybe<Avatar>;
  catchmentArea?: Maybe<Array<Maybe<Location>>>;
  creationDate?: Maybe<Scalars['String']>;
  device?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  identifier?: Maybe<Identifier>;
  localRegistrar?: Maybe<LocalRegistrar>;
  mobile?: Maybe<Scalars['String']>;
  name?: Maybe<Array<Maybe<HumanName>>>;
  practitionerId?: Maybe<Scalars['String']>;
  primaryOffice?: Maybe<Location>;
  role?: Maybe<Scalars['String']>;
  signature?: Maybe<Signature>;
  status?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  underInvestigation?: Maybe<Scalars['Boolean']>;
  userMgntUserID?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
};

export type UserIdentifierInput = {
  system?: InputMaybe<Scalars['String']>;
  use?: InputMaybe<Scalars['String']>;
  value?: InputMaybe<Scalars['String']>;
};

export type UserInput = {
  catchmentArea?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  device?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  identifier?: InputMaybe<Array<InputMaybe<UserIdentifierInput>>>;
  mobile?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Array<InputMaybe<HumanNameInput>>>;
  primaryOffice?: InputMaybe<Scalars['String']>;
  role?: InputMaybe<Scalars['String']>;
  signature?: InputMaybe<SignatureInput>;
  type?: InputMaybe<Scalars['String']>;
  username?: InputMaybe<Scalars['String']>;
};

export type VerifyPasswordResult = {
  __typename?: 'VerifyPasswordResult';
  id?: Maybe<Scalars['String']>;
  mobile?: Maybe<Scalars['String']>;
  scrope?: Maybe<Array<Maybe<Scalars['String']>>>;
  status?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
};

export type BirthRegistrationFragmentFragment = { __typename: 'BirthRegistration', _fhirIDMap?: any | null, id: string, createdAt?: any | null, attendantAtBirth?: AttendantType | null, weightAtBirth?: number | null, birthType?: BirthType | null, child?: { __typename?: 'Person', id?: string | null, multipleBirth?: number | null, birthDate?: string | null, gender?: string | null, name?: Array<{ __typename?: 'HumanName', use?: string | null, firstNames?: string | null, familyName?: string | null } | null> | null } | null, informant?: { __typename?: 'RelatedPerson', id?: string | null, relationship?: string | null, individual?: { __typename?: 'Person', id?: string | null, occupation?: string | null, nationality?: Array<string | null> | null, birthDate?: string | null, identifier?: Array<{ __typename?: 'IdentityType', id?: string | null, type?: IdentityIdType | null } | null> | null, name?: Array<{ __typename?: 'HumanName', use?: string | null, firstNames?: string | null, familyName?: string | null } | null> | null, address?: Array<{ __typename?: 'Address', type?: AddressType | null, line?: Array<string | null> | null, district?: string | null, state?: string | null, city?: string | null, postalCode?: string | null, country?: string | null } | null> | null } | null } | null, mother?: { __typename?: 'Person', id?: string | null, birthDate?: string | null, maritalStatus?: MaritalStatusType | null, occupation?: string | null, detailsExist?: boolean | null, dateOfMarriage?: any | null, educationalAttainment?: EducationType | null, nationality?: Array<string | null> | null, name?: Array<{ __typename?: 'HumanName', use?: string | null, firstNames?: string | null, familyName?: string | null } | null> | null, identifier?: Array<{ __typename?: 'IdentityType', id?: string | null, type?: IdentityIdType | null } | null> | null, address?: Array<{ __typename?: 'Address', type?: AddressType | null, line?: Array<string | null> | null, district?: string | null, state?: string | null, city?: string | null, postalCode?: string | null, country?: string | null } | null> | null, telecom?: Array<{ __typename?: 'ContactPoint', system?: string | null, value?: string | null } | null> | null } | null, father?: { __typename?: 'Person', id?: string | null, birthDate?: string | null, maritalStatus?: MaritalStatusType | null, occupation?: string | null, detailsExist?: boolean | null, dateOfMarriage?: any | null, educationalAttainment?: EducationType | null, nationality?: Array<string | null> | null, reasonNotApplying?: string | null, name?: Array<{ __typename?: 'HumanName', use?: string | null, firstNames?: string | null, familyName?: string | null } | null> | null, identifier?: Array<{ __typename?: 'IdentityType', id?: string | null, type?: IdentityIdType | null } | null> | null, address?: Array<{ __typename?: 'Address', type?: AddressType | null, line?: Array<string | null> | null, district?: string | null, state?: string | null, city?: string | null, postalCode?: string | null, country?: string | null } | null> | null, telecom?: Array<{ __typename?: 'ContactPoint', system?: string | null, value?: string | null } | null> | null } | null, registration?: { __typename?: 'Registration', id?: string | null, contact?: string | null, contactRelationship?: string | null, contactPhoneNumber?: string | null, type?: RegistrationType | null, trackingId?: string | null, registrationNumber?: string | null, attachments?: Array<{ __typename?: 'Attachment', data?: string | null, type?: AttachmentType | null, contentType?: string | null, subject?: AttachmentSubject | null } | null> | null, status?: Array<{ __typename?: 'RegWorkflow', type?: RegStatus | null, timestamp?: any | null, comments?: Array<{ __typename?: 'Comment', comment?: string | null } | null> | null } | null> | null } | null, eventLocation?: { __typename?: 'Location', id: string, type?: LocationType | null, address?: { __typename?: 'Address', line?: Array<string | null> | null, district?: string | null, state?: string | null, city?: string | null, postalCode?: string | null, country?: string | null } | null } | null, questionnaire?: Array<{ __typename?: 'QuestionnaireQuestion', fieldId?: string | null, value?: string | null } | null> | null, history?: Array<{ __typename?: 'History', date?: any | null, action?: RegStatus | null, reinstated?: boolean | null, statusReason?: { __typename?: 'StatusReason', text?: string | null } | null, location?: { __typename?: 'Location', id: string, name?: string | null } | null, office?: { __typename?: 'Location', id: string, name?: string | null } | null, user?: { __typename?: 'User', id?: string | null, type?: string | null, role?: string | null, name?: Array<{ __typename?: 'HumanName', firstNames?: string | null, familyName?: string | null, use?: string | null } | null> | null, avatar?: { __typename?: 'Avatar', data: string, type: string } | null } | null, comments?: Array<{ __typename?: 'Comment', comment?: string | null, createdAt?: any | null, user?: { __typename?: 'User', id?: string | null, username?: string | null, avatar?: { __typename?: 'Avatar', data: string, type: string } | null } | null } | null> | null, input?: Array<{ __typename?: 'InputOutput', valueCode?: string | null, valueId?: string | null, valueString?: string | null } | null> | null, output?: Array<{ __typename?: 'InputOutput', valueCode?: string | null, valueId?: string | null, valueString?: string | null } | null> | null, certificates?: Array<{ __typename?: 'Certificate', hasShowedVerifiedDocument?: boolean | null, collector?: { __typename?: 'RelatedPerson', relationship?: string | null, otherRelationship?: string | null, individual?: { __typename?: 'Person', name?: Array<{ __typename?: 'HumanName', use?: string | null, firstNames?: string | null, familyName?: string | null } | null> | null, telecom?: Array<{ __typename?: 'ContactPoint', system?: string | null, value?: string | null, use?: string | null } | null> | null } | null } | null } | null> | null } | null> | null };

export type RegisterBirthDeclarationMutationVariables = Exact<{
  id: Scalars['ID'];
  details: BirthRegistrationInput;
}>;


export type RegisterBirthDeclarationMutation = { __typename?: 'Mutation', markBirthAsRegistered: { __typename?: 'BirthRegistration', id: string } };

export type CreateDeathDeclarationMutationVariables = Exact<{
  details: DeathRegistrationInput;
}>;


export type CreateDeathDeclarationMutation = { __typename?: 'Mutation', createDeathRegistration: { __typename?: 'CreatedIds', trackingId?: string | null, compositionId?: string | null } };

export type MarkBirthAsCertifiedMutationVariables = Exact<{
  id: Scalars['ID'];
  details: BirthRegistrationInput;
}>;


export type MarkBirthAsCertifiedMutation = { __typename?: 'Mutation', markBirthAsCertified: string };

export type MarkDeathAsCertifiedMutationVariables = Exact<{
  id: Scalars['ID'];
  details: DeathRegistrationInput;
}>;


export type MarkDeathAsCertifiedMutation = { __typename?: 'Mutation', markDeathAsCertified: string };

export type SearchEventsQueryVariables = Exact<{
  sort?: InputMaybe<Scalars['String']>;
  locationIds?: InputMaybe<Array<Scalars['String']> | Scalars['String']>;
}>;


export type SearchEventsQuery = { __typename?: 'Query', searchEvents?: { __typename?: 'EventSearchResultSet', results?: Array<{ __typename?: 'BirthEventSearchSet', registration?: { __typename?: 'RegistrationSearchSet', dateOfDeclaration?: any | null } | null } | { __typename?: 'DeathEventSearchSet', registration?: { __typename?: 'RegistrationSearchSet', dateOfDeclaration?: any | null } | null } | null> | null } | null };

export type RegisterDeathDeclarationMutationVariables = Exact<{
  id: Scalars['ID'];
  details: DeathRegistrationInput;
}>;


export type RegisterDeathDeclarationMutation = { __typename?: 'Mutation', markDeathAsRegistered: { __typename?: 'DeathRegistration', id: string } };

export type FetchBirthRegistrationQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type FetchBirthRegistrationQuery = { __typename?: 'Query', fetchBirthRegistration?: { __typename: 'BirthRegistration', _fhirIDMap?: any | null, id: string, createdAt?: any | null, attendantAtBirth?: AttendantType | null, weightAtBirth?: number | null, birthType?: BirthType | null, child?: { __typename?: 'Person', id?: string | null, multipleBirth?: number | null, birthDate?: string | null, gender?: string | null, name?: Array<{ __typename?: 'HumanName', use?: string | null, firstNames?: string | null, familyName?: string | null } | null> | null } | null, informant?: { __typename?: 'RelatedPerson', id?: string | null, relationship?: string | null, individual?: { __typename?: 'Person', id?: string | null, occupation?: string | null, nationality?: Array<string | null> | null, birthDate?: string | null, identifier?: Array<{ __typename?: 'IdentityType', id?: string | null, type?: IdentityIdType | null } | null> | null, name?: Array<{ __typename?: 'HumanName', use?: string | null, firstNames?: string | null, familyName?: string | null } | null> | null, address?: Array<{ __typename?: 'Address', type?: AddressType | null, line?: Array<string | null> | null, district?: string | null, state?: string | null, city?: string | null, postalCode?: string | null, country?: string | null } | null> | null } | null } | null, mother?: { __typename?: 'Person', id?: string | null, birthDate?: string | null, maritalStatus?: MaritalStatusType | null, occupation?: string | null, detailsExist?: boolean | null, dateOfMarriage?: any | null, educationalAttainment?: EducationType | null, nationality?: Array<string | null> | null, name?: Array<{ __typename?: 'HumanName', use?: string | null, firstNames?: string | null, familyName?: string | null } | null> | null, identifier?: Array<{ __typename?: 'IdentityType', id?: string | null, type?: IdentityIdType | null } | null> | null, address?: Array<{ __typename?: 'Address', type?: AddressType | null, line?: Array<string | null> | null, district?: string | null, state?: string | null, city?: string | null, postalCode?: string | null, country?: string | null } | null> | null, telecom?: Array<{ __typename?: 'ContactPoint', system?: string | null, value?: string | null } | null> | null } | null, father?: { __typename?: 'Person', id?: string | null, birthDate?: string | null, maritalStatus?: MaritalStatusType | null, occupation?: string | null, detailsExist?: boolean | null, dateOfMarriage?: any | null, educationalAttainment?: EducationType | null, nationality?: Array<string | null> | null, reasonNotApplying?: string | null, name?: Array<{ __typename?: 'HumanName', use?: string | null, firstNames?: string | null, familyName?: string | null } | null> | null, identifier?: Array<{ __typename?: 'IdentityType', id?: string | null, type?: IdentityIdType | null } | null> | null, address?: Array<{ __typename?: 'Address', type?: AddressType | null, line?: Array<string | null> | null, district?: string | null, state?: string | null, city?: string | null, postalCode?: string | null, country?: string | null } | null> | null, telecom?: Array<{ __typename?: 'ContactPoint', system?: string | null, value?: string | null } | null> | null } | null, registration?: { __typename?: 'Registration', id?: string | null, contact?: string | null, contactRelationship?: string | null, contactPhoneNumber?: string | null, type?: RegistrationType | null, trackingId?: string | null, registrationNumber?: string | null, attachments?: Array<{ __typename?: 'Attachment', data?: string | null, type?: AttachmentType | null, contentType?: string | null, subject?: AttachmentSubject | null } | null> | null, status?: Array<{ __typename?: 'RegWorkflow', type?: RegStatus | null, timestamp?: any | null, comments?: Array<{ __typename?: 'Comment', comment?: string | null } | null> | null } | null> | null } | null, eventLocation?: { __typename?: 'Location', id: string, type?: LocationType | null, address?: { __typename?: 'Address', line?: Array<string | null> | null, district?: string | null, state?: string | null, city?: string | null, postalCode?: string | null, country?: string | null } | null } | null, questionnaire?: Array<{ __typename?: 'QuestionnaireQuestion', fieldId?: string | null, value?: string | null } | null> | null, history?: Array<{ __typename?: 'History', date?: any | null, action?: RegStatus | null, reinstated?: boolean | null, statusReason?: { __typename?: 'StatusReason', text?: string | null } | null, location?: { __typename?: 'Location', id: string, name?: string | null } | null, office?: { __typename?: 'Location', id: string, name?: string | null } | null, user?: { __typename?: 'User', id?: string | null, type?: string | null, role?: string | null, name?: Array<{ __typename?: 'HumanName', firstNames?: string | null, familyName?: string | null, use?: string | null } | null> | null, avatar?: { __typename?: 'Avatar', data: string, type: string } | null } | null, comments?: Array<{ __typename?: 'Comment', comment?: string | null, createdAt?: any | null, user?: { __typename?: 'User', id?: string | null, username?: string | null, avatar?: { __typename?: 'Avatar', data: string, type: string } | null } | null } | null> | null, input?: Array<{ __typename?: 'InputOutput', valueCode?: string | null, valueId?: string | null, valueString?: string | null } | null> | null, output?: Array<{ __typename?: 'InputOutput', valueCode?: string | null, valueId?: string | null, valueString?: string | null } | null> | null, certificates?: Array<{ __typename?: 'Certificate', hasShowedVerifiedDocument?: boolean | null, collector?: { __typename?: 'RelatedPerson', relationship?: string | null, otherRelationship?: string | null, individual?: { __typename?: 'Person', name?: Array<{ __typename?: 'HumanName', use?: string | null, firstNames?: string | null, familyName?: string | null } | null> | null, telecom?: Array<{ __typename?: 'ContactPoint', system?: string | null, value?: string | null, use?: string | null } | null> | null } | null } | null } | null> | null } | null> | null } | null };

export type FetchDeathRegistrationQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type FetchDeathRegistrationQuery = { __typename?: 'Query', fetchDeathRegistration?: { __typename: 'DeathRegistration', _fhirIDMap?: any | null, id: string, createdAt?: any | null, mannerOfDeath?: MannerOfDeath | null, causeOfDeath?: string | null, maleDependentsOfDeceased?: number | null, femaleDependentsOfDeceased?: number | null, causeOfDeathEstablished?: string | null, causeOfDeathMethod?: CauseOfDeathMethodType | null, deceased?: { __typename?: 'Person', id?: string | null, birthDate?: string | null, age?: number | null, gender?: string | null, maritalStatus?: MaritalStatusType | null, nationality?: Array<string | null> | null, name?: Array<{ __typename?: 'HumanName', use?: string | null, firstNames?: string | null, familyName?: string | null } | null> | null, identifier?: Array<{ __typename?: 'IdentityType', id?: string | null, type?: IdentityIdType | null } | null> | null, deceased?: { __typename?: 'Deceased', deathDate?: string | null } | null, address?: Array<{ __typename?: 'Address', type?: AddressType | null, line?: Array<string | null> | null, district?: string | null, state?: string | null, city?: string | null, postalCode?: string | null, country?: string | null } | null> | null } | null, informant?: { __typename?: 'RelatedPerson', id?: string | null, relationship?: string | null, individual?: { __typename?: 'Person', id?: string | null, nationality?: Array<string | null> | null, occupation?: string | null, birthDate?: string | null, identifier?: Array<{ __typename?: 'IdentityType', id?: string | null, type?: IdentityIdType | null } | null> | null, name?: Array<{ __typename?: 'HumanName', use?: string | null, firstNames?: string | null, familyName?: string | null } | null> | null, telecom?: Array<{ __typename?: 'ContactPoint', system?: string | null, value?: string | null } | null> | null, address?: Array<{ __typename?: 'Address', type?: AddressType | null, line?: Array<string | null> | null, district?: string | null, state?: string | null, city?: string | null, postalCode?: string | null, country?: string | null } | null> | null } | null } | null, father?: { __typename?: 'Person', id?: string | null, name?: Array<{ __typename?: 'HumanName', use?: string | null, firstNames?: string | null, familyName?: string | null } | null> | null } | null, mother?: { __typename?: 'Person', id?: string | null, name?: Array<{ __typename?: 'HumanName', use?: string | null, firstNames?: string | null, familyName?: string | null } | null> | null } | null, medicalPractitioner?: { __typename?: 'MedicalPractitioner', name?: string | null, qualification?: string | null, lastVisitDate?: any | null } | null, registration?: { __typename?: 'Registration', id?: string | null, contact?: string | null, contactRelationship?: string | null, contactPhoneNumber?: string | null, type?: RegistrationType | null, trackingId?: string | null, registrationNumber?: string | null, attachments?: Array<{ __typename?: 'Attachment', data?: string | null, type?: AttachmentType | null, contentType?: string | null, subject?: AttachmentSubject | null } | null> | null, status?: Array<{ __typename?: 'RegWorkflow', type?: RegStatus | null, timestamp?: any | null } | null> | null } | null, eventLocation?: { __typename?: 'Location', id: string, type?: LocationType | null, address?: { __typename?: 'Address', type?: AddressType | null, line?: Array<string | null> | null, district?: string | null, state?: string | null, city?: string | null, postalCode?: string | null, country?: string | null } | null } | null } | null };

export type GetTotalMetricsQueryVariables = Exact<{
  event: Scalars['String'];
  timeStart: Scalars['String'];
  timeEnd: Scalars['String'];
  locationId?: InputMaybe<Scalars['String']>;
}>;


export type GetTotalMetricsQuery = { __typename?: 'Query', getTotalMetrics?: { __typename: 'TotalMetricsResult', estimated: { __typename: 'Estimation', totalEstimation: number, maleEstimation: number, femaleEstimation: number, locationId: string, estimationYear: number, locationLevel: string }, results: Array<{ __typename: 'EventMetrics', total: number, gender: string, eventLocationType: string, practitionerRole: string, timeLabel: string }> } | null };
